using Models;

namespace Models
{
    public static class TodoMockData
    {
        private static List<TodoItem> _todos = new List<TodoItem>
            {
                new TodoItem
                {
                    Id = 1,
                    BatchId = 0,
                    Title = "Task 1",
                    AutoGenerated = false,
                    DueDate = new DateTime(2023, 12, 1),
                    Priority = Priority.High,
                    TodoStatus = TodoStatus.Completed,
                    Category = Category.Prune,
                    Notes = "This is a description for task 1"
                },
                new TodoItem
                {
                    Id = 2,
                    BatchId = 0,
                    Title = "Task 2",
                    AutoGenerated = false,
                    DueDate = new DateTime(2023, 12, 5),
                    Priority = Priority.High,
                    TodoStatus = TodoStatus.Completed,
                    Category = Category.Prune,
                    Notes = "This is a description for task 2"
                },
                new TodoItem
                {
                    Id = 3,
                    BatchId = 0,
                    Title = "Task 3",
                    AutoGenerated = false,
                    DueDate = new DateTime(2023, 12, 10),
                    Priority = Priority.High,
                    TodoStatus = TodoStatus.Completed,
                    Category = Category.Prune,
                    Notes = "This is a description for task 3"
                }
            };

        public static IEnumerable<TodoItem> GetTodos()
        {
            return _todos;
        }

        public static TodoItem GetTodoById(int id)
        {
            return _todos.Find(location => location.Id == id);
        }

        public static void AddTodo(TodoItem location)
        {
            location.Id = _todos.Count > 0 ? _todos[^1].Id + 1 : 1;
            _todos.Add(location);
        }

        public static void UpdateTodo(int id, TodoItem updatecTodo)
        {
            var index = _todos.FindIndex(p => p.Id == id);
            if (index != -1)
            {
                updatecTodo.Id = id;
                _todos[index] = updatecTodo;
            }
        }

        public static void DeleteTodo(int id)
        {
            _todos.RemoveAll(location => location.Id == id);
        }
    }
}
