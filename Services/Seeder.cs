using Microsoft.Extensions.Options;
using Microsoft.VisualBasic;
using Models;
using Models.ViewModels;
using MongoDB.Driver;
using Services.Interfaces;
using System.Runtime;

namespace Services
{
    public class Seeder
    {
        private readonly IMongoCollection<FieldItem> _fieldsCollection;
        private readonly IMongoCollection<TodoItem> _todosCollection;
        private readonly IMongoCollection<ReadingItem> _readingsCollection;
        private readonly IMongoCollection<BatchItem> _batchesCollection;
        private readonly IMongoCollection<CropItem> _cropsCollection;
        private readonly IMongoDatabase _database;
        private readonly MongoDbSettings _settings;


        private readonly IFieldRepo _fieldRepo;

        public Seeder(IOptions<MongoDbSettings> mongoDbSettings, IFieldRepo fieldRepo)
        {
            var mongoClient = new MongoClient(mongoDbSettings.Value.ConnectionString);

            _fieldRepo = fieldRepo;
            _database = mongoClient.GetDatabase(mongoDbSettings.Value.DatabaseName);
            _settings = mongoDbSettings.Value;

            var mongoDatabase = mongoClient.GetDatabase(mongoDbSettings.Value.DatabaseName);
            _fieldsCollection = mongoDatabase.GetCollection<FieldItem>(
                mongoDbSettings.Value.FieldsCollectionName);
            _todosCollection = mongoDatabase.GetCollection<TodoItem>(
                mongoDbSettings.Value.TodosCollectionName);
            _readingsCollection = mongoDatabase.GetCollection<ReadingItem>(
                mongoDbSettings.Value.ReadingsCollectionName);
            _batchesCollection = mongoDatabase.GetCollection<BatchItem>(
                mongoDbSettings.Value.BatchesCollectionName);
            _cropsCollection = mongoDatabase.GetCollection<CropItem>(
                mongoDbSettings.Value.CropsCollectionName);
        }

        public async Task SeedAllData()
        {
            await ResetDatabase();

            await SeedFields();
            await SeedCrops();
            await SeedBatches();
            await SeedTodos();
            await SeedReadings();
        }

        private async Task SeedFields()
        {
            if (await _fieldsCollection.CountDocumentsAsync(FilterDefinition<FieldItem>.Empty) > 0)
            {
                return;
            }

            var fields = new List<FieldItem>
    {
        new FieldItem
        {
            Id = Guid.NewGuid(),
            Name = "North Field",
            Notes = "Rich soil, good drainage, partial shade in afternoon",
            Latitude = 51.9773,
            Longitude = 5.6796
        },
        new FieldItem
        {
            Id = Guid.NewGuid(),
            Name = "South Orchard",
            Notes = "Clay soil, needs amendment, full sun all day",
            Latitude = 51.9750,
            Longitude = 5.6820
        },
        new FieldItem
        {
            Id = Guid.NewGuid(),
            Name = "West Garden",
            Notes = "Sandy loam, irrigated, protected from wind",
            Latitude = 51.9780,
            Longitude = 5.6770
        },
        new FieldItem
        {
            Id = Guid.NewGuid(),
            Name = "Greenhouse 1",
            Notes = "Controlled environment, automated irrigation",
            Latitude = 51.9760,
            Longitude = 5.6800
        }
    };

            await _fieldsCollection.InsertManyAsync(fields);
        }

        private async Task SeedTodos()
        {
            if (await _todosCollection.CountDocumentsAsync(FilterDefinition<TodoItem>.Empty) > 0)
            {
                return;
            }

            var batch = await _batchesCollection.Find(_ => true).FirstOrDefaultAsync();
            if (batch == null)
            {
                return;
            }

            var todos = new List<TodoItem>
    {
        new TodoItem
        {
            Id = Guid.NewGuid(),
            BatchId = (Guid)batch.Id,
            Title = "Water blackberry plants",
            AutoGenerated = true,
            TodoStatus = TodoStatus.NotStarted,
            DueDate = DateTime.Now.AddDays(2),
            Priority = Priority.High,
            Category = Category.Water,
            Notes = "Check soil moisture level first, water deeply if dry"
        },
        new TodoItem
        {
            Id = Guid.NewGuid(),
            BatchId = (Guid)batch.Id,
            Title = "Apply organic fertilizer",
            AutoGenerated = false,
            TodoStatus = TodoStatus.InProgress,
            DueDate = DateTime.Now.AddDays(7),
            Priority = Priority.Medium,
            Category = Category.Fertilize,
            Notes = "Use compost tea, apply to base of plants"
        },
        new TodoItem
        {
            Id = Guid.NewGuid(),
            BatchId = (Guid)batch.Id,
            Title = "Check for pests",
            AutoGenerated = false,
            TodoStatus = TodoStatus.InProgress,
            DueDate = DateTime.Now.AddDays(1),
            Priority = Priority.Medium,
            Category = Category.Other,
            Notes = "Look specifically for aphids on new growth"
        },
        new TodoItem
        {
            Id = Guid.NewGuid(),
            BatchId = (Guid)batch.Id,
            Title = "Prune dead branches",
            AutoGenerated = true,
            TodoStatus = TodoStatus.Completed,
            DueDate = DateTime.Now.AddDays(-3),
            Priority = Priority.Low,
            Category = Category.Prune,
            Notes = "Use clean pruning shears, cut at 45° angle"
        }
    };

            await _todosCollection.InsertManyAsync(todos);
        }

        private async Task SeedReadings()
        {
            if (await _readingsCollection.CountDocumentsAsync(FilterDefinition<ReadingItem>.Empty) > 0)
            {
                return;
            }

            var batch = await _batchesCollection.Find(_ => true).FirstOrDefaultAsync();
            if (batch == null)
            {
                Console.WriteLine("No batches found. Seeding todos skipped.");
                return;
            }

            var readings = new List<ReadingItem>
    {
        new ReadingItem
        {
            Id = Guid.NewGuid(),
            BatchId = (Guid)batch.Id,
            Title = "Weekly health check",
            SoilDryness = SoilDryness.Moist,
            SoilPH = 6.5f,
            HealthStatus = HealthStatus.VeryGood,
            GrowthStage = GrowthStage.Fruiting,
            Temperature = 23.5f,
            Notes = "Plants showing good fruit development",
            Date = DateTime.Now.AddDays(-7).ToString("yyyy-MM-dd")
        },
        new ReadingItem
        {
            Id = Guid.NewGuid(),
            BatchId = (Guid)batch.Id,
            Title = "After rainfall check",
            SoilDryness = SoilDryness.Wet,
            SoilPH = 6.3f,
            HealthStatus = HealthStatus.VeryGood,
            GrowthStage = GrowthStage.Fruiting,
            Temperature = 21.0f,
            Notes = "Soil very wet after heavy rain, good drainage observed",
            Date = DateTime.Now.AddDays(-3).ToString("yyyy-MM-dd")
        },
        new ReadingItem
        {
            Id = Guid.NewGuid(),
            BatchId = (Guid)batch.Id,
            Title = "Heat stress monitoring",
            SoilDryness = SoilDryness.Dry,
            SoilPH = 6.4f,
            HealthStatus = HealthStatus.Fair,
            GrowthStage = GrowthStage.Fruiting,
            Temperature = 28.5f,
            Notes = "Some signs of heat stress on newer growth, increased watering recommended",
            Date = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd")
        },
        new ReadingItem
        {
            Id = Guid.NewGuid(),
            BatchId = (Guid)batch.Id,
            Title = "Today's measurement",
            SoilDryness = SoilDryness.Dry,
            SoilPH = 6.5f,
            HealthStatus = HealthStatus.VeryGood,
            GrowthStage = GrowthStage.Fruiting,
            Temperature = 24.0f,
            Notes = "Recovery from heat stress noted, fruits developing well",
            Date = DateTime.Now.ToString("yyyy-MM-dd")
        }
    };

            await _readingsCollection.InsertManyAsync(readings);
        }

        private async Task SeedBatches()
        {
            if (await _batchesCollection.CountDocumentsAsync(FilterDefinition<BatchItem>.Empty) > 0)
            {
                return;
            }

            var crop = await _cropsCollection.Find(c => c.CommonName == "Blackberry").FirstOrDefaultAsync();
            if (crop == null)
            {
                return;
            }

            var batches = new List<BatchItem>
            {
                new BatchItem
                {
                    Amount = 4,
                    CropId = crop.Id,
                    CommonName = "Blackberry",
                    Location = await GetRandomField(),
                    Planted = new DateTime(2024, 10, 20),
                    LastWatered = new DateTime(2025, 4, 25),
                    LastFertilized = new DateTime(2025, 4, 20),
                    LastPruned = new DateTime(2025, 4, 18),
                    LastHarvested = new DateTime(2025, 4, 10),
                },
            };

            await _batchesCollection.InsertManyAsync(batches);
        }

        private async Task SeedCrops()
        {
            if (await _cropsCollection.CountDocumentsAsync(FilterDefinition<CropItem>.Empty) > 0)
            {
                return;
            }

            var plants = new List<CropItem>
            {
                new CropItem
                {
                    CommonName = "Blackberry",
                    WaterCycle = 3,
                    PruningCycle = 365,
                    FertilizationCycle = 182,
                    HarvestCycle = 7,
                    Notes = "",
                    HarvestStart = Month.September,
                    HarvestEnd  = Month.October,
                    PruningStart =  Month.October,
                    PruningEnd  = Month.February,
                    FertilizingStart = Month.March,
                    FertilizingEnd = Month.October,
                    PHMin = 6.0f,
                    PHMax = 7f,
                    TemperatureMin = -30,
                    TemperatureMax = 30
                },
                new CropItem
                {
                    CommonName = "Raspberry",
                    WaterCycle = 3,
                    PruningCycle = 365,
                    FertilizationCycle = 182,
                    HarvestCycle = 7,
                    Notes = "",
                    HarvestStart = Month.September,
                    HarvestEnd  = Month.October,
                    PruningStart =  Month.October,
                    PruningEnd  = Month.February,
                    FertilizingStart = Month.March,
                    FertilizingEnd = Month.October,
                    PHMin = 6.0f,
                    PHMax = 7f,
                    TemperatureMin = -30,
                    TemperatureMax = 30
                },
                new CropItem
                {
                    CommonName = "Apricot",
                    WaterCycle = 2,
                    PruningCycle = 365,
                    FertilizationCycle = 120,
                    Notes = "",
                    HarvestStart = Month.July,
                    HarvestEnd  = Month.August,
                    PruningStart =  Month.November,
                    PruningEnd  = Month.February,
                    FertilizingStart = Month.March,
                    FertilizingEnd = Month.October,
                    PHMin = 6.0f,
                    PHMax = 7.5f,
                    TemperatureMin = -30,
                    TemperatureMax = 35
                }
            };

            await _cropsCollection.InsertManyAsync(plants);
        }

        private async Task<string> GetRandomField()
        {
            try
            {
                var fields = await _fieldsCollection.Find(_ => true).ToListAsync();
                if (fields.Any())
                {
                    var random = new Random();
                    return fields[random.Next(fields.Count)].Name;
                }

                IEnumerable<FieldItem> repoFields = await _fieldRepo.GetAllFields();
                var field = repoFields.FirstOrDefault();
                return field?.Name ?? "Unknown Field";
            }
            catch
            {
                return "Default Field";
            }
        }

        private async Task ResetDatabase()
        {
            try
            {
                await _database.DropCollectionAsync(_settings.ReadingsCollectionName);
                await _database.DropCollectionAsync(_settings.TodosCollectionName);
                await _database.DropCollectionAsync(_settings.BatchesCollectionName);
                await _database.DropCollectionAsync(_settings.FieldsCollectionName);
                await _database.DropCollectionAsync(_settings.CropsCollectionName);
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }
}